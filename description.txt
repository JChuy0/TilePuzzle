For starters, you can find a link to the puzzle box <a class="hover:bg-yellow-300 hover:text-slate-900 rounded" target="_blank" href="https://jchuy0.github.io/TilePuzzle/"><u>HERE.</u></a>

I was playing a mystery/puzzle game aptly called Blue Prince. A lot of these puzzles were clever and well designed, some required logic, while others involved a play on words. One in particular that caught my attention were the Mora Jai puzzle boxes. These puzzle boxes had a 3x3 grid of colored tiles with another 4 tiles around the outer row. Each colored tile performs a different action, one color moves up on the grid, while another swaps with the tile on the opposite end, and a third rotates all surrounding tiles clockwise. The goal is make the 4 outer tiles light up. I enjoyed these box puzzles, so I wanted to create a web version.

The hardest part of recreating these puzzle boxes, was rotating the surrounding tiles. And admittedly I did use an AI agent to help me here. The general idea is, I made a list of coordinate offsets, and added the coordinates of the pivot tile to each offset. If this results in a valid pair of coordinates, then it is added to a list of valid tiles. After that it was just a matter of looping through the tiles list and swapping the colors around.

For example, imagine a 3x3 grid, and we want to rotate all tiles surrounding the top left tile. This top left tile has the coordinates of (0,0) and our first offset is (-1, -1). We add (0,0) to the offset, if the result is a valid set of coordinates (ranging from 0,0 to 2,2), it is added to a list of valid neighbours.
